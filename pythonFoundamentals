# $python3 to enter the shell
>>> dir(x) //dir to see all the functions that we can perform on x
['__and__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__iand__', '__init__', '__init_subclass__', '__ior__', '__isub__', '__iter__', '__ixor__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__or__', '__rand__', '__reduce__', '__reduce_ex__', '__repr__', '__ror__', '__rsub__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__xor__', 'add', 'clear', 'copy', 'difference', 'difference_update', 'discard', 'intersection', 'intersection_update', 'isdisjoint', 'issubset', 'issuperset', 'pop', 'remove', 'symmetric_difference', 'symmetric_difference_update', 'union', 'update']

>>> help(x.discard) //help to see the definition of a function
>>> help(x.remove)


Python execution modes:

2 modes: 1)Interactiv mode and 2)Batch mode

1)Interactive mode: writing stmts directly on python interpreter
>>> 3+4
7
>>> x=10
>>> y=20
>>> x+y
30
>>> x-y
-10
>>> x
10
>>> y
20
>>> x*y
200
>>> "hello" *3
'hellohellohello'


Python supports dynamic datatypes

c/C++/Java                Python
int x=10                  x=10    --->based on the value assigned the variables are created dynamically
float y=4.5               y=4.5    ---->here float variabl is created
string z="hello"          z="hello"---->here string variable is created

---------------------------------------------------------------------------------------------------------
 
2)Batch mode :writing batch of stmts and saving using .py extension

$ nano sample1.py  #Program performing Arithmetic operations
x=10
y=20
print(x+y)
print(x-y)
print(x*y)
print(x/y)

$ python3 sample1.py
30
-10
200
0

-------------------------------------------------------------------------------------------------------------
Fundamental Datatypes in Python:
1)int
2)float
3)string
4)complex
5)boolean

All these datatypes are objects represented by built-in classes

1)int

x=10  ------This 10 is stored in an object ,that object has address and that address is stored by x
            print(x)---->prints the content present at that address
            print(id(x))-->prints the address of x
            print(type(x))-->prints the type of x

>>> x=10
>>> print(x)
10

>>> print(id(x))
20684928

>>> print(type(x))
<type 'int'>

ex:2
>>> x=10
>>> y=10
>>> print(x,id(x))
(10, 20684928)
>>> print(y,id(y))
(10, 20684928)

**here only one object created and its address is given to both the variables**



2)float
>>> x=4.5
>>> print(x,type(x))
(4.5, <type 'float'>)



3)boolean
>>> x=True
>>> print(x,type(x))
(True, <type 'bool'>)



4)**Complex**
>>> x=3+4j
>>> print(x,type(x))
((3+4j), <type 'complex'>)



5)String
>>> x="hello"
>>> print(x,type(x))
('hello', <type 'str'>)
>>> y="India"
>>> x+y
'helloIndia'


string indexing and slicing
>>> x="python program"
>>> x[0]
'p'
>>> x[1]
'y'
>>> x[0:6]  //index 0-5
'python'
>>> x[-6:-1]
'rogra'
>>> x[-7: ] //index -7 to the end
'program'
>>> x[ :6] //index 0 to 5
'python'
>>> x[0: ] //index 0 to the end
'python program'





-----------------------------------------------------------------------------------------------------------------
Collection Datatypes:
1)List : List is a mutable object, means changes and modifications are allowed
2)Tuple
3)Set
4)Dictionary


1)List : List is a mutable object, means changes and modifications are allowed
         List represnted using [ ]
         
>>> x=[10,20,30,40,50]
>>> print(x)
[10, 20, 30, 40, 50]
>>> len(x)
5
>>> sum(x)
150
>>> max(x)
50
>>> min(x)
10

modifying list value
>>> x[1]=25
>>> print(x)
[10, 25, 30, 40, 50]

list methods------>append(),extend(),insert(),remove(),pop(),clear(),copy(),count(),reverse(),sort()

>>> x=[10,20,30,40,50]
>>> x.append(60) // add to the end of the list
>>> print(x)
[10, 20, 30, 40, 50, 60]

>>> x.insert(2,35) //insert at index 2, add 35)
>>> print(x)
[10, 20, 35, 30, 40, 50, 60]

>>> x.extend(y) //add y list to x
>>> print(x)
[10, 20, 35, 30, 40, 50, 60, 1.5, 2.5, 3.5, 4.5, 5.5]

>>> x.pop(2) //delete at index 2 and return the deleted item
35
>>> print(x)
[10, 20, 30, 40, 50, 60, 1.5, 2.5, 3.5, 4.5, 5.5]

>>> x.remove(40) //remove the number 40(only remove 1 40 if there are more than one 40 in the list)
>>> print(x)
[10, 20, 30, 50, 60, 1.5, 2.5, 3.5, 4.5, 5.5]



----------------------------------------------------------------------------------------------------------------
2)Tuple: It is immutable, changes and modifications are not allowed
         Tuple represented using ( )

ex:

>>> x=(10,20,30,40,50)
>>> y=([10,20,30],[40,50,60],(70,80,90))
>>> print(x[0],type(x[0]))
(10, <type 'int'>)
>>> print(y[0],type(y[0]))
([10, 20, 30], <type 'list'>)
>>> print(y[1],type(y[1]))
([40, 50, 60], <type 'list'>)
>>> print(y[2],type(y[2]))
((70, 80, 90), <type 'tuple'>)
>>> y[0][1]=25 //**It is ok to change the list in a tuple, You are allowed to modify the internal lists**
>>> print(y)
([10, 25, 30], [40, 50, 60], (70, 80, 90))

Ex2:

**It is ok to change the list in a tuple, You are allowed to modify the internal lists as**

>>> y=( [1,2,3], [4,5,6], (10,11,12)) // tuple containing lists and tuple
>>> type(y)
<class 'tuple'> //entire y is a tuple
>>> type(y[0])
<class 'list'> // index 0 is a list
>>> type(y[1])
<class 'list'> // index 1 is a list
>>> type(y[2])
<class 'tuple'> //index 2 is a tuple
>>> y[0][0]=0 //allowed
>>> y[1][0]=0 //allowed
>>> y[2][0]=0 //not allowed
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment

>>> print(y)
([0, 2, 3], [0, 5, 6], (10, 11, 12))



------------------------------------------------------------------------------------------------------------
3)sets: It is a mutable element,changes and modifications are allowed
        set represented using curly braces { }
        -sets doesn't allow duplicates
        -sets doesn't support indexing
        -in sets insertion order is not preserved, i.e the order in which the elements are inserted and the order in which they are stored are not same

set ---> methods: add(), clear(), copy(), difference(),discard(), intersection(), issubset(),pop(), remove(), union(), update()

ex1:
>>> x={10,20,30,40,50}
>>> print(x)
set([40, 50, 20, 10, 30])
>>> x={10,20,30,40,50,10,20}
>>> len(x)
5
>>> x
set([40, 10, 20, 50, 30])
>>> #adding element
... 
>>> x.add(60)
>>> x
set([40, 10, 50, 20, 60, 30])
>>> #removing element
... 
>>> x.discard(40)
>>> x
set([10, 50, 20, 60, 30])

ex2:
a = set() //create a empty set
print(a)
set()  //result is a empty set


>>> x ={1,2,3,4,5}
>>> type(x)
<class 'set'>
>>> x[0] //set does not support index
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'set' object is not subscriptable

>>> x ={1,2,3,4,5,5}
>>> x ={1,2,3,4,5,5,5}
>>> x
{1, 2, 3, 4, 5}  //sets doesn't allow duplicates

>>> x={10,21,1,42,55}
>>> x
{1, 10, 42, 21, 55} //in sets insertion order is not preserved

>>> x={10,21,1,42,55,55,1,10}
>>> x
{1, 10, 42, 21, 55}
>>> len(x)
5
>>> x.add(3)
>>> x
{1, 3, 10, 42, 21, 55}
>>> x.discard(10)
>>> x
{1, 3, 42, 21, 55}
>>> 




-----------------------------------------------------------------------------------------------------------------
4)dictionaries: collection of(k,v) pairs

dictionary ---> methods: clear(), copy(), fromkeys(), get(), items(), pop(), popitem(), setdefault(), update(), values()

>>> a = dict()
>>> a
{}
>>> type(a)
<class 'dict'>


>>> x={"name":"James","age":25}
>>> x
{'age': 25, 'name': 'James'}
>>> #adding a new (k,v)pair
... 
>>> x['sal']=50000
>>> x['city']='chennai'
>>> x
{'city': 'chennai', 'age': 25, 'name': 'James', 'sal': 50000}
>>> #accessing an elemnt ,if u pass the key, you get the value
... 
>>> x['name']
'James'
>>> x['sal']
50000


#access key and values in dict method 1:
>>> for key in x.keys():
...   value = x[key]
...   print(key, "=", value)
... 
name =  Ling
age = 29
sa; = 50000
city = Seattle


#access key and values in dict method 2:
>>> for key, value in x.items():
...   print(key, "=", value)
... 
name =  Ling
age = 29
sa; = 50000
city = Seattle

>>> x.pop("sa;")
50000

>>> x
{'name': ' Ling', 'age': 29, 'city': 'Seattle'}

>>> x['sal'] = 50000

>>> x
{'name': ' Ling', 'age': 29, 'city': 'Seattle', 'sal': 50000}
>>> 








